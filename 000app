oc run test-cer-a \
  --image=sd-wv58-kflz.nam.nsroot.net:5000/cdp-private/cloudera/redhat8/postgresql-10:1-215 \
  --restart=Never -it --rm -n xyz

oc run test-cer-a \
  --image=sd-wv58-kflz.nam.nsroot.net:5000/cdp-private/cloudera_thirdparty/rhel8/postgresql-10:1-215 \
  --restart=Never -it --rm -n xyz


oc run test-cer-a \
  --image=sd-wv58-kflz.nam.nsroot.net:5000/cdp-private/cloudera/redhat8/postgresql-10:1-215 \
  --env=POSTGRESQL_USER=admin \
  --env=POSTGRESQL_PASSWORD=admin123 \
  --env=POSTGRESQL_DATABASE=testdb \
  --restart=Never -it --rm -n xyz

--env=POSTGRESQL_MAX_CONNECTIONS=200
--env=POSTGRESQL_SHARED_BUFFERS=64MB

Step 1: Export the Secret or ConfigMap from xyz Cluster
Export secret to file:

bash
Copy
Edit
oc get secret cdp-private-installer-docker-pull-secret -n xyz -o yaml > docker-pull-secret.yaml
Export configmap (e.g., truststore):

bash
Copy
Edit
oc get configmap cdp-pvc-truststore -n xyz -o yaml > truststore-configmap.yaml
🔹 Step 2: Edit the YAML (very important)
Open each file and change the namespace from xyz to nacho-cds.

For example, in docker-pull-secret.yaml:

yaml
Copy
Edit
metadata:
  name: cdp-private-installer-docker-pull-secret
  namespace: nacho-cds    # <-- CHANGE THIS
Do the same for the ConfigMap YAML file.

🔹 Step 3: Apply to nacho-cds cluster
Now switch your oc CLI to the nacho-cds cluster:

bash
Copy
Edit
export KUBECONFIG=/path/to/nacho-cds-kubeconfig
oc config use-context <your-nacho-cds-context>
Apply the files:

bash
Copy
Edit
oc apply -f docker-pull-secret.yaml
oc apply -f truststore-configmap.yaml
🔹 Step 4: Link the Secret to Default SA in nacho-cds
bash
Copy
Edit
oc secrets link default cdp-private-installer-docker-pull-secret --for=pull -n nacho-cds
✅ Now retry pod or CDS install

Edit
oc delete pod <pod-name> -n nacho-cds
Or re-run:

bash
Copy
Edit
oc run test-cer-a \
  --image=sd-wv58-kflz.nam.nsroot.net:5000/cdp-private/cloudera/redhat8/postgresql-10:1-215 \
  --env=POSTGRESQL_USER=admin \
  --env=POSTGRESQL_PASSWORD=admin123 \
  --env=POSTGRESQL_DATABASE=testdb \
  --restart=Never -it -n nacho-cds




=======================================================


Step-by-Step Fix
✅ STEP 1: Extract the domain certificate from xyz cluster
On your xyz cluster (where it works):

bash
Copy
Edit
oc get configmap openshift-service-ca.crt -n xyz -o yaml > service-ca-xyz.yaml
OR if you installed your own domain cert manually to trust the Docker registry, then find it (like domain.crt, registry.crt, etc.)

If you’re not sure, check this path on xyz admin host:

bash
Copy
Edit
cat /etc/pki/ca-trust/source/anchors/domain.crt
Then copy that file securely to your nacho-cds admin node, e.g.:

bash
Copy
Edit
scp /etc/pki/ca-trust/source/anchors/domain.crt root@nacho-cds-admin:/tmp/
✅ STEP 2: Create the cert ConfigMap in nacho-cds
Now, on the nacho-cds cluster:

bash
Copy
Edit
oc create configmap registry-ca-cert \
  --from-file=sd-wv58-kflz.nam.nsroot.net.crt=/tmp/domain.crt \
  -n openshift-config
Make sure the filename matches the registry hostname, as expected by OpenShift.

✅ STEP 3: Patch the OpenShift proxy to trust it
bash
Copy
Edit
oc patch proxy/cluster \
  --type=merge \
  -p '{"spec":{"trustedCA":{"name":"registry-ca-cert"}}}'
✅ STEP 4: Allow time to propagate or reboot nodes (if urgent)
You can wait a few minutes OR restart nodes (optional but faster):

bash
Copy
Edit
oc debug node/<node-name>
chroot /host
systemctl restart crio
✅ STEP 5: Recreate the pod to test pull
bash
Copy
Edit
oc delete pod test-cer-a -n nacho-cds

oc run test-cer-a \
  --image=sd-wv58-kflz.nam.nsroot.net:5000/cdp-private/cloudera/redhat8/postgresql-10:1-215 \
  --env=POSTGRESQL_USER=admin \
  --env=POSTGRESQL_PASSWORD=admin123 \
  --env=POSTGRESQL_DATABASE=testdb \
  --restart=Never -it -n nacho-cds




------------------------------------------------------------------


Perfect — thanks for the clarity.

✅ Goal:
You want to extract the working domain.crt from the xyz namespace's secrets or configmaps (in the OpenShift cluster itself), and reuse it in the nacho-cds namespace without pulling it from the server filesystem.

✅ Solution: Extract domain.crt from xyz cluster and apply it in nacho-cds
We’ll:

Identify which secret/configmap in xyz contains the cert

Extract the .crt file content

Recreate a ConfigMap in nacho-cds with that content

Patch the OpenShift proxy to trust it

🔍 Step 1: Identify the correct cert-containing Secret or ConfigMap in xyz
From your earlier screenshots, the most likely candidates are:

cdp-private-installer-docker-cert (Secret)

cdp-pvc-truststore (ConfigMap)

Try inspecting one of them, e.g.:

bash
Copy
Edit
oc get secret cdp-private-installer-docker-cert -n xyz -o yaml
Or:

bash
Copy
Edit
oc get configmap cdp-pvc-truststore -n xyz -o yaml
Look for fields like .crt, .pem, or base64-encoded cert blocks under data:.

🧾 Step 2: Extract the cert content
If it’s a Secret, use:

bash
Copy
Edit
oc get secret cdp-private-installer-docker-cert -n xyz -o jsonpath="{.data['domain\.crt']}" | base64 -d > /tmp/domain.crt
Or for a ConfigMap:

bash
Copy
Edit
oc get configmap cdp-pvc-truststore -n xyz -o jsonpath="{.data['domain\.crt']}" > /tmp/domain.crt
Replace 'domain\.crt' with the actual key name if different (e.g., ca.crt, sd-wv58-kflz.nam.nsroot.net.crt, etc.)

📦 Step 3: Create the ConfigMap in nacho-cds
Now that you have the correct /tmp/domain.crt, run:

bash
Copy
Edit
oc create configmap registry-ca-cert \
  --from-file=sd-wv58-kflz.nam.nsroot.net.crt=/tmp/domain.crt \
  -n openshift-config
🔧 Step 4: Patch OpenShift to trust the cert
bash
Copy
Edit
oc patch proxy/cluster \
  --type=merge \
  -p '{"spec":{"trustedCA":{"name":"registry-ca-cert"}}}'
🔄 Step 5: Retry your image pull
Wait ~2 minutes for propagation, or restart the pod:

bash
Copy
Edit
oc delete pod test-cer-a -n nacho-cds
Then rerun the test pod.

✅ Done
This method uses only oc and cluster resources — no need to touch /etc/pki or Docker registry hosts.

Let me know the actual key name (domain.crt or something else) if you hit a jsonpath error and I’ll help adjust the command.



-----------------
-----------------

Single Command Block (Works End to End)
Run this from your working xyz cluster (on bdgtr076x11t1):

bash
Copy
Edit
# Step 1: Dump the secret to a clean file
oc get secret cdp-private-installer-docker-cert -n xyz -o jsonpath="{.data}" | jq -r 'to_entries[] | select(.key | test(".*crt$")) | .value' | base64 -d > /tmp/domain.crt
🔹 This uses jq to find any key ending in .crt inside the secret and decodes it.

✅ Now copy the cert to your nacho-cds cluster node:
bash
Copy
Edit
scp /tmp/domain.crt root@nacho-cds-host:/tmp/domain.crt
Then log into that node.

✅ On nacho-cds cluster: Trust the cert
bash
Copy
Edit
# Step 2: Create the ConfigMap in openshift-config
oc create configmap registry-ca-cert \
  --from-file=sd-wv58-kflz.nam.nsroot.net.crt=/tmp/domain.crt \
  -n openshift-config
bash
Copy
Edit
# Step 3: Patch the proxy to trust this cert
oc patch proxy/cluster \
  --type=merge \
  -p '{"spec":{"trustedCA":{"name":"registry-ca-cert"}}}'
bash
Copy
Edit
# Step 4: Reboot container runtime (optional) or wait 1–2 minutes
oc delete pod test-cer-a -n nacho-cds
Then rerun your test pod.

✅ Final Result:
Single command to extract cert from secret ✅

No need to touch xyz filesystem ✅

Safe and repeatable ✅

Works cross-cluster ✅

Let me know if jq isn’t installed — I’ll give a non-jq fallback.














Tools




\\\\\\\\\\\\\\\

oc get secret cdp-private-installer-docker-cert -n xyz -o yaml | less
Look for something like:

yaml
Copy
Edit
data:
  domain.crt: LS0tLS1CRUdJTiBDRVJ...
  ca.crt: LS0tLS1CRUdJTiBDRVJ...
Check which key looks like the certificate (you’ll see base64-encoded blocks).

✅ Once You Know the Key (e.g., domain.crt), Run This:
Replace domain.crt below with the actual key name:

bash
Copy
Edit
oc get secret cdp-private-installer-docker-cert -n xyz \
  -o jsonpath="{.data['domain\.crt']}" | base64 -d > /tmp/domain.crt
Then confirm:

bash
Copy
Edit
cat /tmp/domain.crt
You should see:

css
Copy
Edit
-----BEGIN CERTIFICATE-----
...
-----END CERTIFICATE-----


