oc create serviceaccount cdp-release-monitoring-pvcservice -n xyz
oc create serviceaccount cdp-release-prometheus-server -n xyz
oc create serviceaccount dps-admin-usernameadmin-private -n xyz


oc edit resourcequota storage-quota -n xyz


oc patch resourcequota storage-quota -n xyz \
  --type merge \
  -p '{"spec":{"hard":{"sc-ontap-nas.storageclass.storage.k8s.io/requests.storage":"100Gi"}}}'

oc describe pod cdp-release-thunderhead-iam-api-5b45b9b5b4-9n5v9 -n xyz | grep -i image


# Liftie
curl -u admin:admin https://sd-wv58-kflz.nam.nsroot.net:5000/v2/cdp-private/cloudera/liftie/tags/list

# DPS Gateway
curl -u admin:admin https://sd-wv58-kflz.nam.nsroot.net:5000/v2/cdp-private/cloudera/dps-gateway/tags/list

# Thunderhead Consoles
curl -u admin:admin https://sd-wv58-kflz.nam.nsroot.net:5000/v2/cdp-private/cloudera_thunderhead/cdp-private-authentication-console/tags/list
curl -u admin:admin https://sd-wv58-kflz.nam.nsroot.net:5000/v2/cdp-private/cloudera_thunderhead/cdp-private-commonconsole/tags/list
curl -u admin:admin https://sd-wv58-kflz.nam.nsroot.net:5000/v2/cdp-private/cloudera_thunderhead/cdp-private-environments-console/tags/list

# Thunderhead APIs
curl -u admin:admin https://sd-wv58-kflz.nam.nsroot.net:5000/v2/cdp-private/cloudera_thunderhead/compute-api/tags/list
curl -u admin:admin https://sd-wv58-kflz.nam.nsroot.net:5000/v2/cdp-private/cloudera_thunderhead/consoleauthenticationcdp/tags/list
curl -u admin:admin https://sd-wv58-kflz.nam.nsroot.net:5000/v2/cdp-private/cloudera_thunderhead/de-api/tags/list
curl -u admin:admin https://sd-wv58-kflz.nam.nsroot.net:5000/v2/cdp-private/cloudera_thunderhead/environment-api/tags/list
curl -u admin:admin https://sd-wv58-kflz.nam.nsroot.net:5000/v2/cdp-private/cloudera_thunderhead/environments2-api/tags/list
curl -u admin:admin https://sd-wv58-kflz.nam.nsroot.net:5000/v2/cdp-private/cloudera_thunderhead/iam-api/tags/list
curl -u admin:admin https://sd-wv58-kflz.nam.nsroot.net:5000/v2/cdp-private/cloudera_thunderhead/iam-console/tags/list
curl -u admin:admin https://sd-wv58-kflz.nam.nsroot.net:5000/v2/cdp-private/cloudera_thunderhead/kerberosmgmt-api/tags/list
curl -u admin:admin https://sd-wv58-kflz.nam.nsroot.net:5000/v2/cdp-private/cloudera_thunderhead/ml-api/tags/list
curl -u admin:admin https://sd-wv58-kflz.nam.nsroot.net:5000/v2/cdp-private/cloudera_thunderhead/sdk2-api/tags/list
curl -u admin:admin https://sd-wv58-kflz.nam.nsroot.net:5000/v2/cdp-private/cloudera_thunderhead/servicediscovery-api/tags/list
curl -u admin:admin https://sd-wv58-kflz.nam.nsroot.net:5000/v2/cdp-private/cloudera_thunderhead/servicediscoverysimple/tags/list
curl -u admin:admin https://sd-wv58-kflz.nam.nsroot.net:5000/v2/cdp-private/cloudera_thunderhead/usermanagement-private/tags/list


Step-by-Step: Search → Save → Loop → Re-tag
🔍 Step 1: Capture All ECR Image Names
Run this to save the list into a file:

bash
Copy
Edit
docker images --format '{{.Repository}}:{{.Tag}}' | grep '36842304766.dkr.ecr' > ecr-images.txt
This creates a file like:

python-repl
Copy
Edit
36842304766.dkr.ecr.us-west-2.amazonaws.com/cdp-private/cloudera/thunderhead-iam-api:1.5.4-h5-b24
...
🔁 Step 2: Loop Through File and Tag Images
Run the following shell script:

bash
Copy
Edit
while read image; do
  # Strip the AWS prefix and keep only the path + tag
  short_name=$(echo "$image" | sed 's|36842304766.dkr.ecr.us-west-2.amazonaws.com/||')
  
  # Build destination tag
  new_image="sd-wv58-kflz.nam.nsroot.net:5000/$short_name"
  
  echo "Tagging: $image --> $new_image"
  docker tag "$image" "$new_image"
done < ecr-images.txt




=============
Full Bash Script (Tag + Push All ECR Images)
bash
Copy
Edit
#!/bin/bash

# Step 1: Capture all AWS ECR images into a file
docker images --format '{{.Repository}}:{{.Tag}}' | grep '36842304766.dkr.ecr' > ecr-images.txt

echo "Saved image list to ecr-images.txt"
echo "Starting tag and push process..."

# Step 2: Loop through each image entry in the file
while read image; do
  # Strip the registry prefix and keep repo:tag
  short_name=$(echo "$image" | sed 's|36842304766.dkr.ecr.us-west-2.amazonaws.com/||')
  
  # Construct the new image path
  new_image="sd-wv58-kflz.nam.nsroot.net:5000/$short_name"

  echo "==> Tagging: $image"
  docker tag "$image" "$new_image"

  echo "==> Pushing: $new_image"
  docker push "$new_image"

  echo "✔ Done: $new_image"
  echo "--------------------------------------------"
done < ecr-images.txt

echo "✅ All images re-tagged and pushed successfully!"
📌 How to Run This
Save the above script as retag-and-push.sh

Make it executable:

bash
Copy
Edit
chmod +x retag-and-push.sh
Run it:

bash
Copy
Edit
./retag-and-push.sh


docker images --format '{{.Repository}}:{{.Tag}}' | grep '36842304766.dkr.ecr' > /tmp/ecr-images.txt

