sudo yum install -y yum-utils
sudo yum-config-manager \
    --add-repo \
    https://download.docker.com/linux/centos/docker-ce.repo

sudo yum install -y docker-ce docker-ce-cli containerd.io

# Start and enable Docker
sudo systemctl start docker
sudo systemctl enable docker

step2
mkdir -p /etc/docker/certs
cd /etc/docker/certs

# Generate key and cert
openssl req -newkey rsa:4096 -nodes -sha256 -keyout domain.key -x509 -days 365 -out domain.crt

# Optional: Combine into one PEM for Cloudera
cat domain.crt domain.key > domain.pem

Step3
mkdir -p /opt/registry/{data,certs,auth}

# Copy TLS certs to registry path
cp /etc/docker/certs/domain.crt /opt/registry/certs/
cp /etc/docker/certs/domain.key /opt/registry/certs/

# Start Docker registry container
docker run -d \
  --restart=always \
  --name registry \
  -v /opt/registry/data:/var/lib/registry \
  -v /opt/registry/certs:/certs \
  -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt \
  -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key \
  -p 5000:5000 \
  registry:2

Step4
{
  "insecure-registries": [],
  "registry-mirrors": [],
  "debug": true,
  "log-level": "info",
  "hosts": ["unix:///var/run/docker.sock", "tcp://0.0.0.0:2375"],
  "tlscacert": "/etc/docker/certs/ca.pem",
  "tlscert": "/etc/docker/certs/domain.crt",
  "tlskey": "/etc/docker/certs/domain.key"
}

sudo systemctl daemon-reexec
sudo systemctl restart docker

Step5
mkdir -p /opt/cloudera-docker-images
cd /opt/cloudera-docker-images

# Extract and load each image
for file in *.tar.gz; do
    tar -xvzf "$file"
    docker load -i $(basename "$file" .tar.gz).tar
done

Step6
for img in $(docker images | grep cdp | awk '{print $1 ":" $2}'); do
    docker tag $img myregistry.example.com:5000/$img
    docker push myregistry.example.com:5000/$img
done

TLS
openssl s_client -connect <registry-host>:5000

On the CDM Admin Host and all OpenShift nodes, make sure Docker knows about the registry:

Edit /etc/docker/daemon.json:

json
Copy
Edit
{
  "insecure-registries": ["<registry-host>:5000"]
}
or if using valid TLS, make sure Docker trusts your CA.

Then restart Docker:

bash
Copy
Edit
sudo systemctl restart docker
‚úÖ Step 3: Authenticate to Private Registry (if secured)
If your registry is secured with auth (htpasswd or others):

bash
Copy
Edit
docker login <registry-host>:5000
You must use this same username and password in Cloudera Manager install wizard under "Docker Username/Password"

‚úÖ Step 4: Provide the TLS Certificate in the Install Wizard
In your Cloudera Manager installation wizard (as in your screenshot):

Select: Use a custom Docker Repository

URL: <registry-host>:5000

Upload: the domain.crt or domain.pem

Provide username/password if registry is secured

‚úÖ Step 5: Make Registry Reachable from OpenShift Pods
Your OpenShift nodes (worker or infra nodes) must resolve and reach your registry:

Ensure DNS for <registry-host> works inside OpenShift

Or add to /etc/hosts on nodes

Or expose the registry with a cluster-wide route if needed

You can test from OpenShift with:

bash
Copy
Edit
oc run testpod --image=<registry-host>:5000/some-image --restart=Never -it --rm -- bash

echo "alias docker=podman" >> ~/.bashrc
source ~/.bashrc


---------------------------------
/home/gpabadmin/.certificates/incoming_certificates/

üîê TLS Cert Files:
File Name	Purpose
sd-wv58-kflz.nam.nsroot.net.pem	Likely your TLS certificate (CRT) ‚úÖ
sd-wv58-kflz.nam.nsroot.net.key	Private key ‚úÖ
sd-wv58-kflz.nam.nsroot.net.ca-cert.pem	CA certificate ‚úÖ
sd-wv58-kflz.nam.nsroot.net.pw	Possibly a password file (ignored for TLS setup)

‚úÖ Secure Docker Registry with TLS Using Your Certs
üõ† Step-by-Step
üîπ 1. Create Directory Structure
bash
Copy
Edit
sudo mkdir -p /opt/registry/{auth,certs,data}
üîπ 2. Copy TLS Certs to Registry Path
bash
Copy
Edit
sudo cp /home/gpabadmin/.certificates/incoming_certificates/sd-wv58-kflz.nam.nsroot.net.pem /opt/registry/certs/domain.crt
sudo cp /home/gpabadmin/.certificates/incoming_certificates/sd-wv58-kflz.nam.nsroot.net.key /opt/registry/certs/domain.key
sudo cp /home/gpabadmin/.certificates/incoming_certificates/sd-wv58-kflz.nam.nsroot.net.ca-cert.pem /opt/registry/certs/ca.crt
üîπ 3. Create a Docker Registry User & Password
bash
Copy
Edit
sudo dnf install httpd-tools -y
sudo htpasswd -Bc /opt/registry/auth/htpasswd clouderauser
Choose a strong password here.

üîπ 4. Start Docker Registry with TLS + Auth
bash
Copy
Edit
docker run -d \
  --restart=always \
  --name secure-registry \
  -v /opt/registry/data:/var/lib/registry \
  -v /opt/registry/auth:/auth \
  -v /opt/registry/certs:/certs \
  -e REGISTRY_HTTP_ADDR=0.0.0.0:5000 \
  -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt \
  -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key \
  -e REGISTRY_AUTH=htpasswd \
  -e REGISTRY_AUTH_HTPASSWD_REALM="Cloudera Docker Registry" \
  -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \
  -p 5000:5000 \
  registry:2
üîπ 5. Test Secure Access
From same or another machine that trusts the CA:

bash
Copy
Edit
curl -u clouderauser:<yourpassword> https://<your-vm-name>:5000/v2/_catalog --cacert /opt/registry/certs/ca.crt
üîπ 6. Allow OpenShift Nodes or Client to Trust Your Cert
If needed, copy the CA cert to:

bash
Copy
Edit
sudo cp /opt/registry/certs/ca.crt /etc/pki/ca-trust/source/anchors/
sudo update-ca-trust extract
This step is critical if OpenShift needs to pull images from this secure registry.



export no_proxy=sd-wv58-kflz.nam.nsroot.net,localhost,127.0.0.1
export http_proxy=http://proxy.example.com:8080
export https_proxy=http://proxy.example.com:8080
curl -u admin:admin https://sd-wv58-kflz.nam.nsroot.net:5000/v2/_catalog --cacert /opt/registry/certs/ca.crt



--------------------------------
‚úÖ Immediate Action Plan
üîπ 1. ‚úÖ Verify Docker Registry Container Is Running & Healthy
bash
Copy
Edit
docker ps -a | grep secure-registry
docker logs secure-registry
You're looking to confirm:

It says "listening on 0.0.0.0:5000"

No crash or fatal errors

If container is not running, restart:

bash
Copy
Edit
docker restart secure-registry
üîπ 2. ‚úÖ Confirm Port 5000 Is Open and Listening
bash
Copy
Edit
sudo ss -tulnp | grep 5000
Expect output:

nginx
Copy
Edit
LISTEN  0  128  0.0.0.0:5000  ...
If not open, then:

bash
Copy
Edit
sudo firewall-cmd --add-port=5000/tcp --permanent
sudo firewall-cmd --reload
And restart the container:

bash
Copy
Edit
docker restart secure-registry
üîπ 3. ‚úÖ Confirm Host Resolves Correctly
Try:

bash
Copy
Edit
ping sd-wv58-kflz.nam.nsroot.net
curl https://localhost:5000/v2/_catalog --cacert /opt/registry/certs/ca.crt -u admin:admin
If it works with localhost, but not FQDN ‚Üí DNS or firewall/proxy issue.

üîπ 4. üîß Ensure no_proxy Is Set Properly
Your current no_proxy is wrong. It only excludes citigroup.net.

Fix it like this:

bash
Copy
Edit
export no_proxy=sd-wv58-kflz.nam.nsroot.net,localhost,127.0.0.1
Add permanently to your shell config:

bash
Copy
Edit
echo 'export no_proxy=sd-wv58-kflz.nam.nsroot.net,localhost,127.0.0.1' >> ~/.bashrc
üîÅ Now Retry:
bash
Copy
Edit
curl -u admin:admin https://sd-wv58-kflz.nam.nsroot.net:5000/v2/_catalog --cacert /opt/registry/certs/ca.crt
If it works, you‚Äôll get:

json
Copy
Edit
{"repositories":[]}


---------------------------------
üîπ A. Fully Disable Podman‚Äôs CNI Conflicts
Since Docker and Podman can conflict, let‚Äôs clean up Podman leftovers:

bash
Copy
Edit
systemctl stop podman
systemctl disable podman
rm -rf /var/lib/cni/
üîπ B. Restart Docker and Docker Registry Container
Restart Docker:

bash
Copy
Edit
systemctl restart docker
Re-run your secure registry container:

bash
Copy
Edit
docker rm -f secure-registry  # remove old one
docker run -d \
  --restart=always \
  --name secure-registry \
  -v /opt/registry/data:/var/lib/registry \
  -v /opt/registry/auth:/auth \
  -v /opt/registry/certs:/certs \
  -e REGISTRY_HTTP_ADDR=0.0.0.0:5000 \
  -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt \
  -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key \
  -e REGISTRY_AUTH=htpasswd \
  -e REGISTRY_AUTH_HTPASSWD_REALM="Cloudera Docker Registry" \
  -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \
  -p 5000:5000 \
  registry:2
üîπ C. Fix Proxy Issues (even for localhost)
Your environment is forcing proxy even for localhost. Let‚Äôs override that.

Run this before any curl or Docker push:

bash
Copy
Edit
unset http_proxy
unset https_proxy
export no_proxy=localhost,127.0.0.1,sd-wv58-kflz.nam.nsroot.net
Then test:

bash
Copy
Edit
curl -u admin:admin https://localhost:5000/v2/_catalog --cacert /opt/registry/certs/ca.crt
üß™ If You Want to Debug:
Check Docker logs:

bash
Copy
Edit
docker logs secure-registry
Re-check port:

bash
Copy
Edit
sudo ss -tulnp | grep 5000


==================
Here‚Äôs how to do it step-by-step:

üîπ 1. Remove podman-docker (conflicts with Docker CE)
bash
Copy
Edit
sudo dnf remove -y podman podman-docker
üîπ 2. Add Docker CE repository
bash
Copy
Edit
sudo dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo
Yes ‚Äî use the CentOS 8 repo; it's compatible with RHEL 8.

üîπ 3. Install Docker Engine and CLI
bash
Copy
Edit
sudo dnf install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
üîπ 4. Enable and start Docker service
bash
Copy
Edit
sudo systemctl enable --now docker
Verify:

bash
Copy
Edit
docker version
docker info
üîπ 5. Now rerun your Docker registry container
Once Docker is active, run your secure-registry command again (as shown earlier).

Let me know once Docker is installed and running ‚Äî I‚Äôll also prepare a script to automate the tagging and pushing of all your Cloudera .tar.gz images to this secure registry.









