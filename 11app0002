Step 1: Transfer New Certs to Admin Host
From your Docker server (sd-wv58-kflz.nam.nsroot.net):

bash
Copy
Edit
scp /opt/registry/certs/domain.crt root@bdgtr076x11t1.nam.nsroot.net:/tmp/
scp /opt/registry/certs/ca.crt root@bdgtr076x11t1.nam.nsroot.net:/tmp/
🔹 Step 2: Log in to the Admin Host
bash
Copy
Edit
ssh root@bdgtr076x11t1.nam.nsroot.net
🔹 Step 3: Create ConfigMap in OpenShift (openshift-config)
This will update the cluster-wide CA bundle to trust your TLS cert.

bash
Copy
Edit
oc create configmap custom-ca \
  --from-file=ca-bundle.crt=/tmp/domain.crt \
  -n openshift-config --dry-run=client -o yaml | oc apply -f -
Use domain.crt if it has all required SANs for API server, registry, etc.

🔹 Step 4: Patch OpenShift Proxy to Use the Custom CA
bash
Copy
Edit
oc patch proxy/cluster --type=merge -p '{"spec":{"trustedCA":{"name":"custom-ca"}}}'
🔹 Step 5: Verify Patch
bash
Copy
Edit
oc get proxy/cluster -o jsonpath='{.spec.trustedCA.name}'
# Expected Output: custom-ca
🔹 Step 6: Trust the CA on Host OS (Optional but Safe)
Copy CA into system trust and extract:

bash
Copy
Edit
cp /tmp/domain.crt /etc/pki/ca-trust/source/anchors/domain.crt
update-ca-trust extract
🔹 Step 7: Restart CDS-Related Pods (e.g., Vault, Console)
If already deployed:

bash
Copy
Edit
oc delete pod vault-0 -n <cdp-namespace>
oc delete pod <cds-console-pod> -n <cdp-namespace>
🔹 Step 8: Re-run CDS Install
Go back to the Cloudera Manager web UI and Retry the installation from the "Installation Progress" step.

🧪 Optional: Test API Trust Manually
bash
Copy
Edit
curl -v https://api.<cluster-name>:6443 --cacert /tmp/domain.crt
Should return 200 OK or valid TLS handshake.

=================================================================


Fix: Build Full Certificate Chain for Trust
🔹 Step 1: Concatenate Full Chain
Let’s build a proper CA bundle (trusted chain):

bash
Copy
Edit
cat /opt/registry/certs/ca.crt /opt/cloudera/security/x509/root_ca_cert.pem > /tmp/ca-bundle.crt
If ca.crt already contains the intermediate cert, and root_ca_cert.pem is your root, this forms the full chain.

🔹 Step 2: Verify the Chain is Valid
bash
Copy
Edit
openssl verify -CAfile /tmp/ca-bundle.crt /opt/registry/certs/domain.crt
Expected output:

swift
Copy
Edit
/opt/registry/certs/domain.crt: OK
🔹 Step 3: Apply to System Trust Store
bash
Copy
Edit
cp /tmp/ca-bundle.crt /etc/pki/ca-trust/source/anchors/ca-bundle.crt
update-ca-trust extract
This will include your updated cert chain in:

swift
Copy
Edit
/etc/pki/tls/certs/ca-bundle.crt
🔹 Step 4: Final Curl Validation
bash
Copy
Edit
curl -v https://console-openshift-console.apps.mlab-ctigtdcai03d.ecs.dyn.nsroot.net:6443
✅ If no self signed certificate error is shown, you’re good to go.

Optional Verification: See Server-Provided Cert Chain
If still unsure, run:

bash
Copy
Edit
openssl s_client -connect console-openshift-console.apps.mlab-ctigtdcai03d.ecs.dyn.nsroot.net:6443 -showcerts
This shows what the server sends vs what’s missing from your CA bundle.

-------------------

openssl s_client -connect console-openshift-console.apps.mlab-ctigtdcai03d.ecs.dyn.nsroot.net:6443 -showcerts


ppppppppppppppppppp


Option 1: Add OpenShift Internal CA to Trust
If your OpenShift provides a cluster CA cert, add that to your trusted CA anchors.

Extract the OpenShift CA cert
On the OpenShift cluster (or ask your OpenShift admin), run:

bash
Copy
Edit
oc get configmap -n kube-system kube-root-ca.crt -o jsonpath='{.data.ca\.crt}' > /tmp/openshift-api-ca.crt
Verify it works with the OpenShift server:

bash
Copy
Edit
curl -v https://console-openshift-console.apps.mlab-ctigtdcai03d.ecs.dyn.nsroot.net:6443 \
  --cacert /tmp/openshift-api-ca.crt
If that works, trust it system-wide:

bash
Copy
Edit
cp /tmp/openshift-api-ca.crt /etc/pki/ca-trust/source/anchors/
update-ca-trust extract



Option 2: Ignore TLS validation (Not Recommended)
For testing only:

bash
Copy
Edit
curl -k https://console-openshift-console.apps.mlab-ctigtdcai03d.ecs.dyn.nsroot.net:6443
This bypasses verification but is insecure and not valid for Cloudera installs.

✅ Option 3: Replace API Server Certs with Org-Trusted CA (Advanced)
This requires:

Reconfiguring OpenShift to use an externally trusted TLS cert for the API server (via apiServer.certificates).

Updating all relevant OpenShift ConfigMaps and components.

⚠️ This is intrusive and generally not done unless a corporate CA is required across the cluster.

✅ Recommendation for Your Case:
Go with Option 1 – add the OpenShift internal CA using the kube-root-ca.crt ConfigMap.

📌 Next Steps:
Run this from your admin host (bdgtr076x11t1):

bash
Copy
Edit
oc get configmap -n kube-system kube-root-ca.crt -o jsonpath='{.data.ca\.crt}' > /tmp/openshift-api-ca.crt
Then:

bash
Copy
Edit
curl -v https://console-openshift-console.apps.mlab-ctigtdcai03d.ecs.dyn.nsroot.net:6443 --cacert /tmp/openshift-api-ca.crt
Let me know what it returns — if it succeeds, we’ll make it permanent.

