Safe to Delete
In your debug shell (or directly on host):

bash
Copy
Edit
chroot /host ls -l --time-style=long-iso /etc/docker/certs.d/
chroot /host ls -l --time-style=long-iso /etc/pki/ca-trust/source/anchors/
Look for files with 2025-05-30 timestamps ‚Äî and remove them:

bash
Copy
Edit
chroot /host rm -f /etc/docker/certs.d/sd-wv58-kflz.nam.nsroot.net:5000/ca.crt
chroot /host rm -f /etc/pki/ca-trust/source/anchors/domain.crt
‚úÖ Then Recreate Correct Cert Path
If you‚Äôve validated your current working domain.crt, then:

bash
Copy
Edit
mkdir -p /host/etc/docker/certs.d/sd-wv58-kflz.nam.nsroot.net:5000
cp /host/etc/pki/ca-trust/source/anchors/domain.crt /host/etc/docker/certs.d/sd-wv58-kflz.nam.nsroot.net:5000/ca.crt
üîÑ Refresh Trust
bash
Copy
Edit
chroot /host update-ca-trust extract
chroot /host systemctl restart crio
üßº Optional: Remove wrong configmaps or secrets created earlier
If the May 30 cert was stored in ConfigMap or Secret:

bash
Copy
Edit
oc delete configmap docker-registry-cert -n openshift-config
oc delete secret my-registry-secret -n nacho







==================


Fix Now
Re-upload the correct working domain.crt to the host from your known location (e.g. /opt/registry/certs/domain.crt on bdgtr076x11t1):

bash
Copy
Edit
oc debug node/dfgtr040x12h5.nam.nsroot.net
Inside debug shell:

bash
Copy
Edit
chroot /host mkdir -p /etc/pki/ca-trust/source/anchors
cp /host/opt/registry/certs/domain.crt /host/etc/pki/ca-trust/source/anchors/domain.crt
Then copy to Docker certs path again:

bash
Copy
Edit
mkdir -p /host/etc/docker/certs.d/sd-wv58-kflz.nam.nsroot.net:5000
cp /host/etc/pki/ca-trust/source/anchors/domain.crt /host/etc/docker/certs.d/sd-wv58-kflz.nam.nsroot.net:5000/ca.crt
Update trust and restart CRI-O:

bash
Copy
Edit
chroot /host update-ca-trust extract
chroot /host systemctl restart crio
Exit debug pod and retry vault

bash
Copy
Edit
exit
oc delete pod vault-test -n nacho
‚úÖ Next Step
Once that‚Äôs done and pod is recreated, run:




============================================

To patch the default service account in your namespace (e.g., nacho) to use your my-registry-secret for image pulls, run this command:

bash
Copy
Edit
oc patch serviceaccount default \
  -p '{"imagePullSecrets": [{"name": "my-registry-secret"}]}' \
  -n nacho
üîÅ If you've already patched it once but want to ensure it's the only secret used (clean slate), run this version:

bash
Copy
Edit
oc patch serviceaccount default \
  --type='merge' \
  -p '{"imagePullSecrets": [{"name": "my-registry-secret"}]}' \
  -n nacho
‚úÖ To Verify Afterward:
bash
Copy
Edit
oc get serviceaccount default -n nacho -o yaml | grep imagePullSecrets -A2
You should see:

yaml
Copy
Edit
imagePullSecrets:
- name: my-registry-secret
bash
Copy
Edit
oc get pods -n nacho -w




=============================
Final Fix Summary for CDS Deployment Failures
üîß 1. Fix ResourceQuota for requests.storage
The NotTerminating scope does not support requests.storage. You need to either:

Remove the scopes: block entirely, or

Move storage resource quotas to a separate ResourceQuota object without the NotTerminating scope.

bash
Copy
Edit
oc patch resourcequota compute-resources -n nacho --type=merge -p '{
  "spec": {
    "scopes": null,
    "hard": {
      "requests.storage": "2000Gi"
    }
  }
}'
Or edit the quota manually:

bash
Copy
Edit
oc edit resourcequota compute-resources -n nacho
And remove the scopes: section entirely if using storage limits.

üõ†Ô∏è 2. Confirm Volume Limit
Ensure that PVCs are under quota. Your error says:

yaml
Copy
Edit
exceeded quota: storage-quota, requested: 200Gi, used: 0, limited: 50Gi
To increase quota:

bash
Copy
Edit
oc patch resourcequota compute-resources -n nacho --type='merge' -p '{
  "spec": {
    "hard": {
      "requests.storage": "2000Gi"
    }
  }
}'
üîë 3. Set my-registry-cert Pull Secret
If not done already:

bash
Copy
Edit
oc patch serviceaccount default -n nacho -p '{"imagePullSecrets": [{"name": "my-registry-cert"}]}'
üì¶ 4. StorageClass Check
Your default StorageClass is correct:

cpp
Copy
Edit
sc-ontap-nas (default)
Ensure all CDS components are requesting volumes using this class. If needed, update any Helm overrides or CDS settings for this.

üõë 5. Validate PVCs
Check PVC usage and binding:

bash
Copy
Edit
oc get pvc -n nacho
Ensure PVCs like cdp-embedded-db-backend are Bound.

==================================


Fix: Increase the storage quota properly
Use this oc edit command not just for compute resources, but explicitly for storage quota if it's a separate ResourceQuota object:

bash
Copy
Edit
oc edit resourcequota storage-quota -n nacho
And make sure you increase:

yaml
Copy
Edit
spec:
  hard:
    requests.storage: 200Gi
If storage-quota doesn‚Äôt exist, list to confirm:

bash
Copy
Edit
oc get resourcequota -n nacho
Then patch or create it as needed:

bash
Copy
Edit
oc create resourcequota storage-quota -n nacho \
  --hard=requests.storage=200Gi
Or patch:

bash
Copy
Edit
oc patch resourcequota storage-quota -n nacho \
  --type='merge' -p '{"spec":{"hard":{"requests.storage":"200Gi"}}}'
